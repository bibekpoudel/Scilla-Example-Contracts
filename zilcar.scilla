(* ZilCar contract *)

(***************************************************)
(*                 Scilla version                  *)
(***************************************************)

scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import ListUtils IntUtils

library ZilCar

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg


(*****  ERROR EVENTS  *******)
type Error =
| CodeNotOwner
| CodeCarNotFound
| CodeCarAlreadyExists

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotOwner              => Int32 -1
      | CodeCarNotFound           => Int32 -2
      | CodeCarAlreadyExists      => Int32 -3
      end
    in
    { _exception : "Error"; code : result_code }


type Car = | Car of String String String Uint256 ByStr20
(* Make, Model, Color, Year, CarOwner*)

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ZilCar
(owner: ByStr20)

field cars: Map String Car
                = Emp String Car

(* Emit Errors *)
procedure Throw(error: Error)
  e = make_error error;
  throw e
end

procedure RequireCarDoesnotExist(car_number: String)
    car_exists <- exists cars[car_number];
    match car_exists with 
      | True => 
          err = CodeCarAlreadyExists;
          Throw err
      | False => 
      end
    end

procedure RequireCarExists(car_number: String)
    car_exists <- exists cars[car_number];
    match car_exists with 
      | True => 
      | False => 
          err = CodeCarNotFound;
          Throw err
      end
    end


transition ListNewCar(car_number: String, make: String, model: String, color: String, year: Uint256, car_owner: ByStr20)
    new_car = Car make model color year car_owner;
    RequireCarDoesnotExist car_number;
    cars[car_number] := new_car;
    e = {_eventname : "Car listed"; car_number: car_number; make: make;
        model: model; color: color; car_owner: car_owner  };
    event e  
end

transition GetCar(car_number: String)
    car <- cars[car_number];
    match car with
      | Some v =>
          e = {_eventname: "Get car:"; car:car};
          event e
      | None =>
          err = CodeCarNotFound;
          Throw err
      end
    end
          

transition DelistCar(car_number: String)
    RequireCarExists car_number;
    delete cars[car_number];
    e = {_eventname: "Car delisted:"; car_number: car_number };
    event e
end


transition UpdateCar(car_number: String, make: String, model: String, color: String, year: Uint256, car_owner: ByStr20)
    RequireCarExists car_number;
    temp_car = Car make model color year car_owner;
    cars[car_number] := temp_car;
    e = {_eventname : "Car updated"; car_number: car_number; make: make;
        model: model; color: color; car_owner: car_owner  }
end


